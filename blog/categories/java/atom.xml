<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Baham's Blog]]></title>
  <link href="http://baham.co/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://baham.co/"/>
<<<<<<< HEAD
  <updated>2014-05-14T15:12:52+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T11:42:16+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T11:37:55+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T11:34:45+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T11:32:46+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T11:22:22+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T11:09:22+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T11:06:29+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T11:03:25+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T10:56:59+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T10:49:48+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T10:46:00+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T10:03:51+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T10:02:09+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:59:38+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:56:35+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:52:39+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:48:21+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:28:54+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-13T15:41:09+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-10T14:29:38+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-09T08:04:53+00:00</updated>
=======
  <updated>2014-05-09T07:51:13+00:00</updated>
>>>>>>> 22f19b1eca3855502d3d78da9c3fb735767fe410
>>>>>>> 86196436ad6547fcb3bc629a611e2b21d063c3e9
>>>>>>> 91be7c6effccd693b350415d10bac31f8204b779
>>>>>>> b93ae7e360507df6f770c409171311f98f14048d
>>>>>>> 69ccb24d4e3f1da310be6b98df3a5977c09d0e9a
>>>>>>> 40f6a1c95c8ebc3ef520d4871332905a31c8208f
>>>>>>> 3fbaa123c98a19e6c31b0c1fd6eebb9e168f4cb4
>>>>>>> 49780dd9356fb4e17a75b16aa6451c908b594bfe
>>>>>>> d7d0b21b9fe5bc092265fa7a82875dbb4b743507
>>>>>>> 59598ca05bdbdd1d69f6a0504ed96494b4907a84
>>>>>>> cde8ba22796df6a6fc9748ab4783e29cc5bacb03
>>>>>>> 3db9e0292e1392349c9ba3f699b8b0c2ab873aff
>>>>>>> 147b2c24376a96e256925e2a91037560b54286c3
>>>>>>> 221f7b4d2af0a95f03f4340e9392b962991c472e
>>>>>>> 6ef108adb6c228d7fe3ad2b98051e1aec8673a6c
>>>>>>> 3740197c4124eebc0ac64e069f576dd472152f04
>>>>>>> fb7918680b4ff6ba3ec516b55f09399e19fa4f11
>>>>>>> 77cb78623b95875c2503aabf9ca37236db1ca644
>>>>>>> 947ef30bb61ed5f638f15647b925943094ce0cb1
>>>>>>> 7e6bc619f0a31c8f52d8da881b7301ca64d1bec1
>>>>>>> 7af39ccf5d39c8d1caac2cf0331ce4168ab85a56
>>>>>>> cc1bf30928cf3304b18595ba7c18f416925677d9
  <id>http://baham.co/</id>
  <author>
    <name><![CDATA[Baham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[码农第二期-图灵社区出品]]></title>
    <link href="http://baham.co/11_29_734.html"/>
    <updated>2012-11-29T11:19:36+00:00</updated>
    <id>http://baham.co/734</id>
    <content type="html"><![CDATA[<p>主讲内容：</p>

<blockquote><p><strong>• 本期专题:JavaScript</strong>
<strong>• 七大大框架论剑</strong>
<strong>• Nicholas C. Zakas 和他的</strong>
<strong>《JavaScript高高级程序设计》</strong>
<strong>• 陈皓:我的精神家园</strong>
<strong>• 老老赵:以“玩”之名</strong>
<strong>• 迄今为止止最伟大大的极客</strong>
<strong>• 深入入Markdown</strong></p></blockquote>

<!-- more -->


<p>（以上均为原文引用）</p>

<p>目录：</p>

<blockquote><p><strong>卷首语</strong>
<strong>1 改变世界的好码农</strong>
<strong>专题:JavaScript</strong>
<strong>3 JavaScript 宝座:七大框架论剑 </strong>
<strong>19 JavaScript 模块化开发一瞥 </strong>
<strong>27 对话 Nicholas C. Zakas</strong>
<strong>——《JavaScript 高级程序设计》作者</strong>
<strong>34 通过对象图学习 JavaScript</strong>
<strong>人物</strong>
<strong>41 我的精神家园——陈皓(@ 左耳朵耗子)专访</strong>
<strong>54 以“玩”之名——赵劼(@ 老赵)专访</strong>
<strong>践行</strong>
<strong>70 通才还是专才——由摩托裁员引发的讨论</strong>
<strong>九卦</strong>
<strong>73 为什么 Nikola Tesla 是迄今为止最伟大的极客</strong>
<strong>鲜阅</strong>
<strong>88 善言的 JavaScript</strong>
<strong>——选自《善言的 JavaScript: 现代化编程指南》</strong>
<strong>出版的未来</strong>
<strong>96 Markdown 作者谈“深入 Markdown”</strong>
<strong>书榜</strong>
<strong>106 看看大家都在看什么?</strong>
<strong>妙评</strong>
<strong>109 《Erlang/OTP 并发编程实战》</strong>
<strong>成书手记</strong>
<strong>115 从失败中学习</strong>
<strong> </strong>
<strong> ——《30 天自制操作系统》译者自述</strong>
<strong>社区动态</strong>
<strong>119 iTran 乐译 10 期</strong>
<strong>120 专家审读 5 期</strong>
<strong>121 十月,跟着图灵听课去!</strong></p></blockquote>

<p>全文下载：<a href="http://www.ituring.com.cn/book/download/ac4c3832-bce6-488b-bd39-54ccbbd4e3d9">码农第二期</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tic-Tac-Toe-AI-GUI版本]]></title>
    <link href="http://baham.co/08_25_456.html"/>
    <updated>2012-08-25T23:16:22+00:00</updated>
    <id>http://baham.co/456</id>
    <content type="html"><![CDATA[<p><img src="http://baham.co/wp-content/uploads/2012/08/tttui-300x273.png" alt="Tic-Tac-Toe-AI_Gui-开始" />之前写的一直是NoUI版本，最近基于Java <strong>Swing</strong>写了一个GUI版本，部分代码有了变化，不过整个AI设计并没有变化，还是那个涉及<strong>博弈论</strong>的老问题。</p>

<p>Java最大的特点莫过于面向对象，不过在改写整个程序过程中，发现其实自己刚开始写的NoUI版本的扩展性并不好，很多代码需要修改，而不是只在客户代码中修改、或者通过集成修改子类。</p>

<p>总之这个版本在<strong>逻辑</strong>上应该没什么大问题，和NoUI版并无大异。只是代码<strong>可读性</strong>并没有进步，以后优势见可能会在次修改代码，会让它读起来更优美。现在，先将代码放出，可能很多地方需要完善，但是基本实现对奕的全过程。<!-- more --></p>

<p><a href="http://baham.co/wp-content/uploads/2012/08/tttui3.png"><img src="http://baham.co/wp-content/uploads/2012/08/tttui3-300x231.png" alt="Tic-Tac-Toe-AI_Gui-对奕" /></a><a href="http://baham.co/wp-content/uploads/2012/08/tttui2.png"><img src="http://baham.co/wp-content/uploads/2012/08/tttui2-300x273.png" alt="Tic-Tac-Toe-AI_Gui-判定胜负" /></a></p>

<p>以下为GUI部分通过Swing设计的代码：</p>

<pre><code>package tttai;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import javax.swing.event.MouseInputAdapter;

public class TTTUI extends MouseInputAdapter{

    private JFrame jf;
    private JLabel[][] jlb;

    private String s;
    public TTTUI(String s){

        try{
            String theLook=UIManager.getSystemLookAndFeelClassName();
            //String theLook="com.sun.java.swing.plaf.motif.MotifLookAndFeel";

            UIManager.setLookAndFeel(theLook);
        }catch (Exception e){
            System.err.println("Exception:"+e);
        }
        this.s="X";
        jf=new JFrame();
        jf.setLayout(new GridLayout(3,3));
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jf.setSize(300,300);
        jf.setResizable(false);
        jf.setLocation(500,300);
        jf.setTitle("Tic-Tac-Toe-AI(GUI)");
        jf.setBackground(Color.BLACK);
        jf.setForeground(Color.GREEN);
        jlb=new JLabel[3][3];

        for(int i=0;i&lt;=jlb.length-1;i++){
            for (int j=0;j&lt;=jlb[i].length-1;j++){
                jlb[i][j]=new JLabel("");
                jlb[i][j].setSize(100,100);
                jlb[i][j].setBorder(new EtchedBorder(EtchedBorder.LOWERED));
                jlb[i][j].addMouseListener(this);
                jf.add(jlb[i][j]);
            }
        }

        jf.setVisible(true);

    }

    public void mouseClicked(MouseEvent e){

        if(e.getSource()==jlb[0][0]){
            dropPiece(0,0);
        }else if(e.getSource()==jlb[0][1]){
            dropPiece(0,1);
        }else if(e.getSource()==jlb[0][2]){
            dropPiece(0,2);
        }else if( e.getSource()==jlb[1][0]){
            dropPiece(1,0);

        }else if(e.getSource()==jlb[1][1]){
            dropPiece(1,1);

        }else if(e.getSource()==jlb[1][2]){
            dropPiece(1,2);
        }else if (e.getSource()==jlb[2][0]){
            dropPiece(2,0);
        }else if(e.getSource()==jlb[2][1]){
            dropPiece(2,1);
        }else if(e.getSource()==jlb[2][2]){
            dropPiece(2,2);
        }

        check();

    }
    public void check(){
        int tmp=TicTacToeAI.getAI().check();
        if(tmp==1){
            JOptionPane.showMessageDialog(jf, "Player1 Win!");
            disableBoard();
        }else if(tmp==-1){
            JOptionPane.showMessageDialog(jf, "AI Win!");
            disableBoard();

        }else if(tmp==3){

        }else {
            JOptionPane.showMessageDialog(jf, "It is a draw!");
            disableBoard();

        }
    }
    public void disableBoard(){
        for(int i=0;i&lt;=jlb.length-1;i++){
            for (int j=0;j&lt;=jlb[i].length-1;j++){
                jlb[i][j].removeMouseListener(this);
            }
        }
    }
    public int[][] getBoard(){
        int t[][]=new int[3][3];
        for (int i=0;i&lt;=2;i++){
            for (int j=0;j&lt;=2;j++){
                if(jlb[i][j].getText().equals("X")){
                    t[i][j]=1;
                }else if(jlb[i][j].getText().equals("O")){
                    t[i][j]=-1;
                }else 
                    t[i][j]=0;
            }
        }
        return t;

    }

    public void dropPiece(int x,int y){
        if (jlb[x][y].getText().equals("")){
            jlb[x][y].setText(s);
            jf.repaint();
            TicTacToeAI.getAI().start();
            }else {
                JOptionPane.showMessageDialog(jf, "Wrong Location!");
            }

    }

    public void dropPiece(String flag,int x,int y){

        jlb[x][y].setText(flag);
        jf.repaint();

    }
    public JFrame getFrame(){
        return jf;
    }
}
</code></pre>

<p><a href="http://baham.co/wp-files/tttai.zip"> Tic-Tac-Toe-AI_GUI完整源码下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程练习-八皇后问题]]></title>
    <link href="http://baham.co/08_09_415.html"/>
    <updated>2012-08-09T22:51:41+00:00</updated>
    <id>http://baham.co/415</id>
    <content type="html"><![CDATA[<p><img src="http://baham.co/wp-content/uploads/2012/08/IMG_20120809_224205_%E5%89%AF%E6%9C%AC-225x300.jpg" alt="Baham-八皇后问题一个解决方法" /></p>

<p>在国际象棋棋盘上（8X8）</p>

<p>要求把8个皇后（国际象棋中皇后可以在横、竖、斜四个方向移动，且不限制每次移动格数）放在上边，并且使其中任何两个不能攻击。</p>

<p>左图为<strong>八皇后问题</strong>的一个解决方案。</p>

<p><strong>遍历</strong>8个皇后在棋盘上的所有位置，并返回任意两个不存在威胁的所有情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[汉诺塔-印度人的智慧]]></title>
    <link href="http://baham.co/08_09_410.html"/>
    <updated>2012-08-09T22:37:27+00:00</updated>
    <id>http://baham.co/410</id>
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E8%AF%BA%E5%A1%94#.E4.BB.BB.E6.84.8F.E5.88.9D.E5.A7.8B.E7.B5.90.E6.A7.8B.EF.BC.88arbitrary_initial_configuration.EF.BC.89.E7.9A.84.E8.A7.A3.E6.B3.95">汉诺塔</a>，指在三个不同的塔之间移动盘子<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/Tower_of_Hanoi.jpeg/220px-Tower_of_Hanoi.jpeg" alt="汉诺塔" />。三个塔中一个上面有一定数目的盘子，盘子<strong>直径递减</strong>，最上面的最小，如图（图为8层）。</p>

<p><strong>汉诺塔</strong>的目的是把所有盘子从一个塔移动到另一个，第三个塔用来过渡。</p>

<p>一次只能移动一个盘子，而且不能把盘子放到比它直径小的盘子上。</p>

<p>要求：使用<strong>递归</strong>解决该问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程练习-递归-野蛮人与传教士]]></title>
    <link href="http://baham.co/08_09_408.html"/>
    <updated>2012-08-09T22:29:25+00:00</updated>
    <id>http://baham.co/408</id>
    <content type="html"><![CDATA[<p>三个传教士与三个野蛮人同时来到河边，发现只有一条可以同时搭载两人 的小船。而如果任何一边的野蛮人数多于传教士，传教士就会死掉。编写程序，解决<strong>传教士和野蛮人</strong>的过河问题。</p>
]]></content>
  </entry>
  
</feed>
