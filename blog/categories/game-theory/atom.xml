<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Game Theory | Baham's Blog]]></title>
  <link href="http://baham.co/blog/categories/game-theory/atom.xml" rel="self"/>
  <link href="http://baham.co/"/>
<<<<<<< HEAD
  <updated>2014-05-14T10:02:09+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:59:38+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:56:35+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:52:39+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:48:21+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-14T09:28:54+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-13T15:41:09+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-10T14:29:38+00:00</updated>
=======
<<<<<<< HEAD
  <updated>2014-05-09T08:04:53+00:00</updated>
=======
  <updated>2014-05-09T07:51:13+00:00</updated>
>>>>>>> 22f19b1eca3855502d3d78da9c3fb735767fe410
>>>>>>> 86196436ad6547fcb3bc629a611e2b21d063c3e9
>>>>>>> 91be7c6effccd693b350415d10bac31f8204b779
>>>>>>> b93ae7e360507df6f770c409171311f98f14048d
>>>>>>> 69ccb24d4e3f1da310be6b98df3a5977c09d0e9a
>>>>>>> 40f6a1c95c8ebc3ef520d4871332905a31c8208f
>>>>>>> 3fbaa123c98a19e6c31b0c1fd6eebb9e168f4cb4
>>>>>>> 49780dd9356fb4e17a75b16aa6451c908b594bfe
>>>>>>> d7d0b21b9fe5bc092265fa7a82875dbb4b743507
  <id>http://baham.co/</id>
  <author>
    <name><![CDATA[Baham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[博弈论--三个枪手的枪战]]></title>
    <link href="http://baham.co/10_19_bo-yi-lun-san-ge-qiang-shou-de-qiang-zhan.html"/>
    <updated>2013-10-19T23:30:00+00:00</updated>
    <id>http://baham.co/bo-yi-lun-san-ge-qiang-shou-de-qiang-zhan</id>
    <content type="html"><![CDATA[<p> Ａ枪手，命中率0.3</p>

<p>B 0.8</p>

<p>C 1.0</p>

<p>每人两发子弹，一次一发，最多射击两轮，你是Ａ，顺序是A-B-C-A-B-C</p>

<p>你怎么办？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解Tic-Tac-Toe人工智能实现]]></title>
    <link href="http://baham.co/08_02_328.html"/>
    <updated>2012-08-02T21:12:39+00:00</updated>
    <id>http://baham.co/328</id>
    <content type="html"><![CDATA[<p><img src="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_18-53-21.png" alt="井字棋棋盘 tic-tac-toe 棋盘" /> 井字棋棋盘</p>

<p><strong>Tic-Tac-Toe</strong>又称<strong>井字棋</strong>，即在3X3的棋盘上，双方轮流落子，先将3枚棋子连成一线的一方获得胜利。</p>

<p>Tic-Tac-Toe变化简单，只有765个可能局面，26830个棋局，因此常成为<a href="https://zh.wikipedia.org/wiki/%E5%8D%9A%E5%BC%88%E8%AE%BA">博弈论</a>和<a href="https://zh.wikipedia.org/wiki/%E9%81%8A%E6%88%B2%E6%A8%B9">游戏树</a>搜寻的教学例子，同时也是<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>的一道好题目。</p>

<h1></h1>

<h1>关于棋盘：</h1>

<p><img src="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_18-58-43.png" alt="Tic-tac-toe棋盘坐标 井字棋 坐标" /> 井字棋棋盘坐标版</p>

<p>整个棋盘可以连接出<strong>8条线</strong>。<a href="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_19-12-42.png">tic-tac-toe 井字棋 胜利方式</a>（如右图）&mdash;&mdash;></p>

<p>在中心的位置（2，2）有<strong>四条线</strong>穿过。</p>

<p>在所有棱位（1，2），（2，1），（2，3），（3，2），均有<strong>两条线</strong>穿过。</p>

<p>在所有角位（1，1），（1，3），（3，1），（3，3），均有<strong>三条线</strong>。<!-- more --></p>

<h1>如何实现人工智能：</h1>

<p>在下棋过程中，任何一方无非处于四种状态：</p>

<ol>
<li><p> 开局落子</p></li>
<li><p> 第二步棋（先角原则）</p></li>
<li><p> 攻</p></li>
<li><p> 守</p></li>
<li><p> 垃圾时间</p></li>
</ol>


<p>想要实现人工智能，让AI和人正常对弈，必须让AI理解这5种状态。</p>

<h2>开局落子：</h2>

<p><img src="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_19-26-48.png" alt="Tic-tac-toe 井字棋 AI先手" /> 井字棋 AI先手[/caption]</p>

<p>开局时，分为两种状况，一是AI先手，二是AI后手。AI先手时，毫无疑问，让AI落子在(2,2)位置（以X表示AI）。如图：</p>

<p>而当AI后手时，玩家可能落子情况有分为三种：</p>

<ol>
<li><p> 中心位置</p></li>
<li><p> 棱位</p></li>
<li><p> 角位</p></li>
</ol>


<h3>1、玩家落子在中心位置：</h3>

<p><img src="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_19-34-15.png" alt="tic-tac-toe 井字棋 AI落子棱位" /> 图1[/caption]</p>

<p>此时，AI需要落子在角位。原因在于，如果落子在棱位，将出现如下<strong>必输的情形</strong>，示例如下，AI此时落子在（1，2）位置：玩家只需要在（3，1）或（3，3）位置落子，如图在（3，1），下一步则必须落子在（1，3），对手跟进落子在（1，1），</p>

<p><img src="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_19-39-59.png" alt="tic-tac-toe 井字棋 大势已去" />
——则AI大势已去！</p>

<h3>2、棱位  3、角位</h3>

<p>这两种情形，AI指需要落子在（2，2）位置，便可保无虞，甚至<strong>反守为攻</strong>。</p>

<h2>第二步棋（先角原则）：</h2>

<p><img src="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_19-12-42.png" alt="tic-tac-toe 井字棋 先角原则" />由上可知，当中心被玩家占据，需要避免上边提到的“<strong>必输的情形</strong>”跟进落子在角上，而非棱上。</p>

<p>而如果，自己占据中心，玩家落子在棱上，根据“必输情形”，此时也应该落在角上，而且如上图图1，应该落子在玩家棋子对面的角位上，此时“必输情形”将属于玩家。</p>

<h2>攻：</h2>

<p>任何<strong>己方</strong>两枚棋子连接在一起，且连线有空位时，落子在空位。</p>

<h2>守：</h2>

<p>任何<strong>玩家</strong>两枚棋子连接在一起，且连线有空位时，落子在空位。</p>

<h2>垃圾时间：</h2>

<p>由于棋盘大小限制，下棋过程中，很容易陷入双方均无法获胜的情况，此时，只需要找个空位随便落子即可。</p>

<h1>特殊情况：</h1>

<p>在以以上方式实现AI时，出现了一种比较特殊情况。即玩家先手，落子在角位以（1，1）为例，AI根据“<strong>开局落子</strong>”的原则3，落子在（2，2）。而玩家在第一步棋子位置（1，1）的对角（3，3）位置落子，</p>

<p><img src="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_20-13-02.png" alt="Tic-tac-toe-ai 井字棋 特殊情况" /> 井字棋 特殊情况[/caption]</p>

<p>依据“<strong>角先原则</strong>”，AI将落子在（1，3）或（3，1），对方将在（3，1）或（1，3）封堵AI，此时AI便已输了。<img src="http://baham.co/wp-content/uploads/2012/08/%E6%97%A0%E6%A0%87%E9%A2%98-%E7%94%BB%E5%9B%BE_2012-08-02_20-14-49.png" alt="tic-tac-toe-ai 特殊情况 AI输 井字棋" /></p>

<p>所以，唯有此种情况不能执行“<strong>角先原则</strong>”。</p>

<h1>代码实现：</h1>

<p>其中，以<strong>二维数组</strong>t[3][3]表示棋盘，-1表示AI棋子X，1表示玩家棋子O，</p>

<p>dropPiece(Position p)方法表示落子，Position（int f ,int x,int y）表示棋盘位置，x,y表示坐标值，f取值范围为（-1或1）表示AI或者玩家。下面是AI类主要代码：</p>

<pre><code>public void start(){
        if(attrack()){//实现攻
        }else if(defend()){//实现守 
                }else if(center()){//实现开局落子
        }else{
            planB();//实现特殊情况、先角原则及垃圾时间
        }
    }//以上方法是AI运行开始的方法
    public boolean attrack(){
        return twoPieces(-1);

    }//攻，任何己方两枚棋子连接在一起，且连线有空位时，落子在空位。
    public boolean defend(){
        return twoPieces(1);

    }//守，任何对方两枚棋子连接在一起，且连线有空位时，落子在空位。
 private boolean twoPieces(int f) {

        for(int i=0;i&lt;=t.length-1;i++){
            if(t[i][0]==t[i][1]&amp;&amp;t[i][0]==f&amp;&amp;t[i][2]==0){
                b.dropPiece(new PieceLocation(-1,i,2));return true;
            }else if(t[i][0]==t[i][2]&amp;&amp;t[i][0]==f&amp;&amp;t[i][1]==0){
                b.dropPiece(new PieceLocation(-1,i,1));return true;
            }else if (t[i][1]==t[i][2]&amp;&amp;t[i][1]==f&amp;&amp;t[i][0]==0){
                b.dropPiece(new PieceLocation(-1,i,0));return true;
            }else if(t[0][i]==t[1][i]&amp;&amp;t[0][i]==f&amp;&amp;t[2][i]==0){
                b.dropPiece(new PieceLocation(-1,2,i));return true;
            }else if (t[0][i]==t[2][i]&amp;&amp;t[0][i]==f&amp;&amp;t[1][i]==0){
                b.dropPiece(new PieceLocation(-1,1,i));return true;
            }else if(t[1][i]==t[2][i]&amp;&amp;t[1][i]==f&amp;&amp;t[0][i]==0){
                b.dropPiece(new PieceLocation(-1,0,i));return true;
            }            
        }
        if (t[0][0]==t[1][1]&amp;&amp;t[0][0]==f&amp;&amp;t[2][2]==0){
            b.dropPiece(new PieceLocation(-1,2,2));return true;
        }else if(t[1][1]==t[2][2]&amp;&amp;t[1][1]==f&amp;&amp;t[0][0]==0){
            b.dropPiece(new PieceLocation(-1,0,0));return true;
        }else if(t[0][2]==t[1][1]&amp;&amp;t[0][2]==f&amp;&amp;t[2][0]==0){
            b.dropPiece(new PieceLocation(-1,2,0));return true;
        }else if (t[1][1]==t[2][0]&amp;&amp;t[1][1]==f&amp;&amp;t[0][2]==0){
            b.dropPiece(new PieceLocation(-1,0,2));return true;
        }else{
            return false;
        }
    }//包含任何己方两枚棋子连接在一起，且连线有空位的情况
     //（横向、纵向和斜着的方向）
   public boolean center(){
        if(t[1][1]==0){
            b.dropPiece(new PieceLocation(-1,1,1));return true;
        }else{
            return false;
        }
    }
    public void planB(){

        if(t[0][0]==t[2][2]&amp;&amp;t[0][0]==1||t[0][2]==t[2][0]&amp;&amp;t[0][2]==1){
            if(t[0][2]==0){
                b.dropPiece(new PieceLocation(-1,0,2));
            }else{
                b.dropPiece(new PieceLocation(-1,0,0));
            }//特殊情况实现代码

        }else if((t[0][1]==1||t[1][2]==1)&amp;&amp;t[2][0]==0){
            b.dropPiece(new PieceLocation(-1,2,0));
        }else if((t[1][0]==1||t[2][1]==1)&amp;&amp;t[0][2]==0){
            b.dropPiece(new PieceLocation(-1,0,2));
                //以上四行为先角原则的实现 以下为垃圾时间代码实现，即从座至右，
//从上到下，扫描整个棋盘，然后寻找空位，落子。
        }else if(t[0][0]==0){
            b.dropPiece(new PieceLocation(-1,0,0));
        }else if (t[0][2]==0){
            b.dropPiece(new PieceLocation(-1,0,2));
        }else if(t[2][0]==0){
            b.dropPiece(new PieceLocation(-1,2,0));
        }else if (t[2][2]==0){
            b.dropPiece(new PieceLocation(-1,2,2));
        }else if(t[0][1]==0){
            b.dropPiece(new PieceLocation(-1,0,1));
        }else if(t[1][0]==0){
            b.dropPiece(new PieceLocation(-1,1,0));
        }else if(t[1][2]==0){
            b.dropPiece(new PieceLocation(-1,1,2));
        }else 
            b.dropPiece(new PieceLocation(-1,2,1));
        }
      }
</code></pre>

<p><a href="http://baham.co/wp-files/Tic-Tac-Toe.jar"> Tic-Tac-Toe-AI Jar文件</a></p>

<p><a href="http://baham.co/wp-files/Tic-Tac-Toe.zip">Tic-Tac-Toe-AI 源码</a></p>
]]></content>
  </entry>
  
</feed>
